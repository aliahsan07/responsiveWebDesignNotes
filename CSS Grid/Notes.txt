display: grid

To add colums to the grid use the grid-template-columns property.
.container {
  display: grid;
  grid-template-columns: 50px 50px;
}

The number of parameters given to the grid-template-columns property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.

To adjust the rows manually, use the grid-template-rows

CSS Grid units
fr: sets the column or row to a fraction of availible space.
auto: sets the column or row to the width or height of its content automatically,
%: adjusts the column or row to the percent width of its container.

To add a gap between the columns, use the grid-column-gap property like this:
grid-column-gap: 10px;
grid-row-gap for gap between rows

grid-gap is a shorthand property for grid-row-gap and grid-column-gap.

Upto this point all the properties are pertinent to the container.
Now lets take a look at few properties that are native to grid items.

grid-column: 
so the grid is divided into elements using vertical and horizontal lines.
So if you specify grid-column: 1/ 3, this will span the element from the first vertical line to third, essentially two block units.

same goes for grid-row

In CSS Grid, the content of each item is located in a box which is referred to as a cell.
You can align the content's position within its cell horizontally using the justify-self property on a grid item. 
By default, this property has a value of stretch, which will make the content fill the whole width of the cell.

Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the align-self property on an item. 

justify-self vs align-self

justify-items on grid container to align all the items inside the container

grid-template-areas
You can group cells of your grid together into an area and give the area a custom name. Do this by using grid-template-areas on the container like this:
grid-template-areas:
  "header header header"
  "advert content content"
  "footer footer footer";

Have to admit I don't understand the utility of this property fully at this point.

After creating an areas template for your grid container, you can place an item in your custom area by referencing the name you gave it. To do this, you use the grid-area property on an item like this:
.item1 { grid-area: header; }

If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:
item1 { grid-area: 1/1/2/4; }

grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;

repeat function 
grid-template-rows: repeat(100, 50px);

repeat(2, 1fr 50px) 20px => (translates to) = 1fr 50px 1fr 50px 20px;

There's another built-in function to use with grid-template-columns and grid-template-rows called minmax. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. 

grid-template-columns: 100px minmax(50px, 200px);
In the code above, grid-template-columns is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.

The repeat function comes with an option called auto-fill. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining auto-fill with minmax.

repeat(auto-fill, minmax(60px, 1fr));
When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one.

grid-template-columns with the repeat function above produces great responsive results.

auto-fit
Works almost identically to auto-fill
The only difference is that when the container's size exceeds the size of all the items combined, auto-fill keeps inserting empty rows or columns and pushes your items to the side, while auto-fit collapses those empty rows or columns and stretches your items to fit the size of the container.
If your container can't fit all your items on one row, it will move them down to a new one.

fit -> fits the existing items (stretches the elements)
fill -> fills with empty items 

